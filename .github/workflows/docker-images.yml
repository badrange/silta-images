name: Build and push docker images

on:
  push:
    branches:
      - master
    paths:
      - '**/**/TAGS'
jobs:
  build_and_push:
    name: Build and push
    runs-on: ubuntu-latest

    # Secrets
    # DOCKER_REGISTRY_URL: "eu.gcr.io"
    # GCR_PROJECT_ID: "silta-images"
    # GCR_ACCOUNT_EMAIL: [sa email]
    # GCR_ACCOUNT_KEY: "[sa key]"

    env:
      BUILD_CURRENT: ${{ github.sha }}
      BUILD_PREVIOUS: ${{ github.event.before }}
      DOCKER_REGISTRY_URL: ${{ secrets.DOCKER_REGISTRY_URL }}
      GCR_PROJECT_ID: ${{ secrets.GCR_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          # version: '286.0.0'
          project_id: ${{ secrets.GCR_PROJECT_ID }}
          service_account_email: ${{ secrets.GCR_ACCOUNT_EMAIL }}
          service_account_key: ${{ secrets.GCR_ACCOUNT_KEY }}
          export_default_credentials: true

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          gcloud auth configure-docker -q

      - name: Build and push the images
        run: |
          set -ex

          # List changes since the last build, extract "TAGS" file path 
          RECENT_CHANGES=$(git diff-tree --no-commit-id --name-only -r $BUILD_CURRENT $BUILD_PREVIOUS | grep "TAGS");
          for tagsFilePath in $RECENT_CHANGES
          do
            # Remove "/TAGS" from the path
            folder=${tagsFilePath%"/TAGS"}; 
            
            # Split first two directores and use as image name and tag respectively.
            # This only works with bash, make sure the shell is correct!
            read IMAGE_NAME LEFTOVERS <<<$(IFS="/"; echo $folder);
            
            # Read TAGS file, tag image with each tag and push to remote
            IMAGE_ID=$DOCKER_REGISTRY_URL/$GCR_PROJECT_ID/$IMAGE_NAME
            cat $tagsFilePath | while read TAG || [[ -n $TAG ]];
            do
              # Add tags
              docker build $folder --file $folder/Dockerfile --tag $IMAGE_ID:$TAG
              # Push image
              docker push $IMAGE_ID:$TAG
            done;

          done;
