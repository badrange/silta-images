name: Build and push docker images

on:
  push:
    branches:
      - master
    paths:
      - '**/**/TAGS'
jobs:
  build_and_push_gcr:
    name: Build and push to GCR
    runs-on: ubuntu-latest

    # Secrets
    # GCR_URL: "eu.gcr.io"
    # GCR_PROJECT_ID: "silta-images"
    # GCR_ACCOUNT_EMAIL: [sa email]
    # GCR_ACCOUNT_KEY: "[sa key]"

    env:
      BUILD_CURRENT: ${{ github.sha }}
      BUILD_PREVIOUS: ${{ github.event.before }}
      GCR_URL: ${{ secrets.GCR_URL }}
      GCR_PROJECT_ID: ${{ secrets.GCR_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          # version: '286.0.0'
          project_id: ${{ secrets.GCR_PROJECT_ID }}
          service_account_email: ${{ secrets.GCR_ACCOUNT_EMAIL }}
          service_account_key: ${{ secrets.GCR_ACCOUNT_KEY }}
          export_default_credentials: true

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          gcloud auth configure-docker -q

      - name: Build and push the images
        run: |
          set -ex

          # List changes since the last build, extract "TAGS" file path 
          RECENT_CHANGES=$(git diff-tree --no-commit-id --name-only -r $BUILD_CURRENT $BUILD_PREVIOUS | grep "TAGS");
          for tagsFilePath in $RECENT_CHANGES
          do
            # Remove "/TAGS" from the path
            folder=${tagsFilePath%"/TAGS"}; 
            
            # Split first two directores and use as image name and tag respectively.
            # This only works with bash, make sure the shell is correct!
            read IMAGE_NAME LEFTOVERS <<<$(IFS="/"; echo $folder);
            
            # Read TAGS file, tag image with each tag and push to remote
            IMAGE_ID=$GCR_URL/$GCR_PROJECT_ID/$IMAGE_NAME
            cat $tagsFilePath | while read TAG || [[ -n $TAG ]];
            do
              # Add tags
              docker build $folder --file $folder/Dockerfile --tag $IMAGE_ID:$TAG
              # Push image
              docker push $IMAGE_ID:$TAG
            done;

          done;

  build_and_push_docker_hub:
    name: Build and push to Docker Hub
    runs-on: ubuntu-latest

    # Secrets
    # DOCKER_HUB_REGISTRY_URL: "wunderio"
    
    env:
      BUILD_CURRENT: ${{ github.sha }}
      BUILD_PREVIOUS: ${{ github.event.before }}
      DOCKER_REGISTRY_URL: ${{ secrets.DOCKER_REGISTRY_URL }}
      DOCKER_USER: ${{secrets.DOCKER_USER}}
      DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
      
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: docker login
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD  

      - name: Build and push the images
        run: |
          set -ex

          # List changes since the last build, extract "TAGS" file path 
          RECENT_CHANGES=$(git diff-tree --no-commit-id --name-only -r $BUILD_CURRENT $BUILD_PREVIOUS | grep "TAGS");
          for tagsFilePath in $RECENT_CHANGES
          do
            # Remove "/TAGS" from the path
            folder=${tagsFilePath%"/TAGS"}; 
            
            # Split first two directores and use as image name and tag respectively.
            # This only works with bash, make sure the shell is correct!
            read IMAGE_NAME LEFTOVERS <<<$(IFS="/"; echo $folder);

            # GCR has different image names
            IMAGE_NAME=$(
            case "$IMAGE_NAME" in
              ("silta-cicd") echo "cicd" ;;
              ("silta-varnish") echo "varnish" ;;
              ("silta-nginx") echo "nginx" ;;
              ("silta-php-shell") echo "shell" ;;
              ("silta-openresty") echo "openresty" ;;
              ("silta-node") echo "node" ;;
              ("silta-mailhog") echo "silta-mailhog" ;;
              ("silta-php-fpm") echo "php" ;;
              ("silta-solr") echo "solr" ;;
              ("silta-proxy") echo "silta-proxy" ;;
              ("silta-rsync") echo "rsync" ;;
              (*) echo "$IMAGE_NAME" ;;
            esac)

            # Read TAGS file, tag image with each tag and push to remote
            IMAGE_ID=$DOCKER_REGISTRY_URL/$IMAGE_NAME
            cat $tagsFilePath | while read TAG || [[ -n $TAG ]];
            do
              # Add tags
              docker build $folder --file $folder/Dockerfile --tag $IMAGE_ID:$TAG
              # Push image
              docker push $IMAGE_ID:$TAG
            done;

          done;

  circleci-k8s-test-build:
    name: Test released CLI
    runs-on: ubuntu-latest
    needs: 
      - build_and_push_gcr
      - build_and_push_docker_hub
    strategy:
      matrix:
        project: [
          {repo: "drupal-project-k8s", jobs: "4"}, 
          {repo: "frontend-project-k8s", jobs: "4"}, 
          {repo: "simple-project-k8s", jobs: "3"} 
        ]
    steps:
      - uses: actions/checkout@v2
      - name: Validate released cli with ${{ matrix.project.REPO_NAME }}
        run: |
          REPO_NAME="${{ matrix.project.repo }}"
          JOB_COUNT="${{ matrix.project.jobs }}"
          CIRCLECI_DEV_API_TOKEN="${{ secrets.CIRCLECI_DEV_API_TOKEN }}"

          if [ -z "${REPO_NAME}" ] || [ -z "${CIRCLECI_DEV_API_TOKEN}" ] || [ -z "${JOB_COUNT}" ]; then
              echo "Missing CIRCLECI_DEV_API_TOKEN secret"
              exit 1
          fi

          echo "Running ${REPO_NAME} build on CircleCI"
          echo "Project link: https://circleci.com/gh/wunderio/workflows/${REPO_NAME}"

          base_api_url="https://circleci.com/api/v1.1/project/github/wunderio/${REPO_NAME}"
          # Trigger a new deployment.
          curl -s -X POST $base_api_url/build?circle-token=${CIRCLECI_DEV_API_TOKEN}
          sleep 10
          # Wait for deployment to be complete
          while curl -s "$base_api_url?circle-token=${CIRCLECI_DEV_API_TOKEN}&limit=${JOB_COUNT}" | jq -e 'any(.[]; (.status == "running") or (.status == "queued"))' > /dev/null
          do
          echo "still running"
          sleep 10
          done
          # Test that the build was successful
          curl -s "$base_api_url?circle-token=${CIRCLECI_DEV_API_TOKEN}&limit=${JOB_COUNT}" | jq '.[] | { job_name: .workflows.job_name, status: .status }'
          curl -s "$base_api_url?circle-token=${CIRCLECI_DEV_API_TOKEN}&limit=${JOB_COUNT}" | jq -e 'all(.[]; .status == "success")' > /dev/null
