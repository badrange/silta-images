name: Test build docker images

on:
  pull_request:

jobs:
  changed_files:
    name: Get changed Dockerfiles
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.changes.outputs.matrix}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get changed Dockerfiles
        id: changes
        run: |
          dockerfile_list_json=$(git diff --name-only --diff-filter=ACMRT \
            ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} \
            | grep Dockerfile$ \
            | jq -Rsc '. / "\n" - [""]' )
          echo "::set-output name=matrix::${dockerfile_list_json}"
  
  test_build:
    name: Test build
    runs-on: ubuntu-latest
    needs: changed_files
    strategy:
      fail-fast: false
      matrix: 
        dockerfile: ${{ fromJson(needs.changed_files.outputs.matrix) }}
    if: ${{needs.changed_files.outputs.matrix}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Building dockerfile
        run: |
          set -ex
          docker build $(dirname ${{matrix.dockerfile}}) --file ${{matrix.dockerfile}}

  circleci-k8s-test-build:
    name: Test released CLI
    runs-on: ubuntu-latest
    needs: test_build
    strategy:
      matrix:
        project: [ 
          {repo: "drupal-project-k8s", jobs: "4"}, 
          {repo: "frontend-project-k8s", jobs: "4"}, 
          {repo: "simple-project-k8s", jobs: "3"} 
        ]
    steps:
      - uses: actions/checkout@v2
      - name: Validate released cli with ${{ matrix.project.REPO_NAME }}
        run: |
          REPO_NAME="${{ matrix.project.repo }}"
          JOB_COUNT="${{ matrix.project.jobs }}"
          CIRCLECI_DEV_API_TOKEN="${{ secrets.CIRCLECI_DEV_API_TOKEN }}"

          if [ -z "${REPO_NAME}" ] || [ -z "${CIRCLECI_DEV_API_TOKEN}" ] || [ -z "${JOB_COUNT}" ]; then
              echo "Missing CIRCLECI_DEV_API_TOKEN secret"
              exit 1
          fi

          echo "Running ${REPO_NAME} build on CircleCI"
          echo "Project link: https://circleci.com/gh/wunderio/workflows/${REPO_NAME}"

          base_api_url="https://circleci.com/api/v1.1/project/github/wunderio/${REPO_NAME}"
          # Trigger a new deployment.
          curl -s -X POST $base_api_url/build?circle-token=${CIRCLECI_DEV_API_TOKEN}
          sleep 10
          # Wait for deployment to be complete
          while curl -s "$base_api_url?circle-token=${CIRCLECI_DEV_API_TOKEN}&limit=${JOB_COUNT}" | jq -e 'any(.[]; (.status == "running") or (.status == "queued"))' > /dev/null
          do
          echo "still running"
          sleep 10
          done
          # Test that the build was successful
          curl -s "$base_api_url?circle-token=${CIRCLECI_DEV_API_TOKEN}&limit=${JOB_COUNT}" | jq '.[] | { job_name: .workflows.job_name, status: .status }'
          curl -s "$base_api_url?circle-token=${CIRCLECI_DEV_API_TOKEN}&limit=${JOB_COUNT}" | jq -e 'all(.[]; .status == "success")' > /dev/null
